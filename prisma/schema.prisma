// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DriverStatus {
  PENDING     // e.g. just signed up, not vetted yet
  ACTIVE      // can receive assignments
  SUSPENDED   // temporarily barred (e.g. for policy violation)
  RETIRED     // no longer driving
}

enum AssignmentStatus {
  PENDING     // Assignment created but not started
  STARTED     // Driver has started the assignment
  COMPLETED   // Assignment completed
  CANCELLED   // Assignment cancelled
}

enum PaymentType {
  FIXED       // Fixed rate payment
  PER_DELIVERY // Payment per delivery
  HOURLY      // Hourly rate
}

model Vehicle {
  id            Int       @id @default(autoincrement())
  driver        User      @relation(fields: [driverId], references: [id])
  driverId      Int

  make          String    // e.g. "Toyota"
  model         String    // e.g. "Corolla"
  licensePlate  String    @unique
  color         String?
  capacity      Int?      // seats, or load capacity

  verified      Boolean   @default(false)  // fleet admin verified this vehicle
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model User {
  id                    Int            @id @default(autoincrement())
  email                 String         @unique
  name                  String?
  password              String?        // Hashed password for password-based auth
  verificationToken     String?        @unique // for email verification
  verified              Boolean        @default(false)
  resetPasswordToken    String?        @unique
  resetPasswordExpires  DateTime?
  magicLinkToken        String?        @unique
  magicLinkExpires      DateTime?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  // Driver specific fields
  driverStatus         DriverStatus   @default(PENDING)
  vehicles             Vehicle[]
  serviceAreas         DriverServiceArea[]
  schedules            DriverSchedule[]
  availabilityBlocks   DriverAvailabilityBlock[]
  restaurantAssignments RestaurantAssignment[]
  
  // Profile image fields
  profileImageUrl      String?        // Cloudinary secure URL
  profileImagePublicId String?        // Cloudinary public ID for deletion
}

model DriverServiceArea {
  id         String   @id @default(uuid())
  driverId   Int      @map("driver_id")
  areaName   String   @map("area_name")
  postalCode String?  @map("postal_code")
  city       String
  state      String
  country    String   @default("USA")
  latitude   Decimal  @db.Decimal(10, 8)
  longitude  Decimal  @db.Decimal(11, 8)
  radiusKm   Int      @default(10) @map("radius_km")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")

  driver User @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@unique([driverId, areaName])
  @@map("driver_service_areas")
}

model DriverSchedule {
  id            String   @id @default(uuid())
  driverId      Int      @map("driver_id")
  dayOfWeek     Int      @map("day_of_week") @db.SmallInt
  startTime     DateTime @db.Time() @map("start_time")
  endTime       DateTime @db.Time() @map("end_time")
  isAvailable   Boolean  @default(true) @map("is_available")
  maxDeliveries Int      @default(70) @map("max_deliveries")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  driver User @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@unique([driverId, dayOfWeek])
  @@map("driver_schedules")
}

model DriverAvailabilityBlock {
  id          String    @id @default(uuid())
  driverId    Int       @map("driver_id")
  blockedDate DateTime  @db.Date() @map("blocked_date")
  reason      String?
  isFullDay   Boolean   @default(true) @map("is_full_day")
  startTime   DateTime? @db.Time() @map("start_time")
  endTime     DateTime? @db.Time() @map("end_time")
  createdAt   DateTime  @default(now()) @map("created_at")

  driver User @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@unique([driverId, blockedDate, startTime, endTime])
  @@map("driver_availability_blocks")
}

model RestaurantAssignment {
  id                   String           @id @default(uuid())
  driverId             Int              @map("driver_id")
  restaurantId         String           @map("restaurant_id")
  assignmentDate       DateTime         @db.Date @map("assignment_date")
  pickupTime           DateTime         @db.Time() @map("pickup_time")
  estimatedDeliveries  Int              @map("estimated_deliveries")
  actualDeliveries     Int?             @map("actual_deliveries")
  status               AssignmentStatus @default(PENDING)
  paymentType          PaymentType      @default(FIXED) @map("payment_type")
  paymentRate          Decimal          @db.Decimal(10, 2) @map("payment_rate")
  notes                String?
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")

  driver User @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  // Future implementation - commented out for now
  // deliveries     Delivery[]
  // deliveryRoutes DeliveryRoute[]
  // earnings       DriverEarning[]

  @@unique([driverId, restaurantId, assignmentDate])
  @@index([assignmentDate])
  @@index([driverId, status])
  @@map("restaurant_assignments")
} 